{% extends 'base.html.twig' %}

{% block title %}Products Management{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .color-variants {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }
        .color-variant {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid #fff;
            box-shadow: 0 0 0 1px #ddd;
            cursor: pointer;
            position: relative;
        }
        .color-variant:hover::after {
            content: attr(data-color);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: #333;
            color: #fff;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            margin-bottom: 5px;
        }
        .product-image {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 4px;
        }
        .product-images {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }
        .color-image {
            width: 30px;
            height: 30px;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
        .more-colors {
            background: #eee;
            color: #666;
            font-size: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .editable {
            cursor: pointer;
            padding: 2px 5px;
            border-radius: 3px;
            transition: background-color 0.2s;
        }
        
        .editable:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }
        
        .editable.editing {
            background-color: #fff;
            border: 1px solid #007bff;
            padding: 1px 4px;
        }
        
        .editable input {
            border: none;
            background: transparent;
            width: 100%;
            outline: none;
        }
        
        .save-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border-radius: 4px;
            display: none;
            z-index: 1000;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle delete button clicks
            document.querySelectorAll('.delete-product-form').forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    if (confirm('Are you sure you want to delete this product?')) {
                        fetch(this.action, {
                            method: 'POST',
                            body: new FormData(this)
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                this.closest('tr').remove();
                            }
                        });
                    }
                });
            });

            // Inline editing functionality
            const editableFields = document.querySelectorAll('.editable');
            const saveIndicator = document.createElement('div');
            saveIndicator.className = 'save-indicator';
            saveIndicator.textContent = 'Saved!';
            document.body.appendChild(saveIndicator);

            function showSaveIndicator() {
                saveIndicator.style.display = 'block';
                setTimeout(() => {
                    saveIndicator.style.display = 'none';
                }, 2000);
            }

            editableFields.forEach(field => {
                field.addEventListener('dblclick', function(e) {
                    if (this.classList.contains('editing')) return;
                    
                    const currentValue = this.textContent.trim();
                    const input = document.createElement('input');
                    input.value = currentValue.replace('$', ''); // Remove $ from price if present
                    this.textContent = '';
                    this.appendChild(input);
                    this.classList.add('editing');
                    input.focus();

                    const productId = this.closest('tr').querySelector('[data-product-id]').dataset.productId;
                    const fieldName = this.dataset.field;

                    function saveChanges() {
                        const newValue = input.value.trim();
                        if (newValue !== currentValue) {
                            fetch(`/admin/product/${productId}/update`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    field: fieldName,
                                    value: newValue
                                })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    // Format the display value based on the field type
                                    let displayValue = newValue;
                                    if (fieldName === 'price') {
                                        displayValue = '$' + parseFloat(newValue).toFixed(2);
                                    }
                                    field.textContent = displayValue;
                                    showSaveIndicator();
                                } else {
                                    // If update failed, revert to original value
                                    field.textContent = currentValue;
                                    alert('Failed to update: ' + (data.message || 'Unknown error'));
                                }
                            })
                            .catch(error => {
                                field.textContent = currentValue;
                                alert('Error updating field');
                            });
                        } else {
                            field.textContent = currentValue;
                        }
                        field.classList.remove('editing');
                    }

                    // Handle Enter key
                    input.addEventListener('keydown', function(e) {
                        if (e.key === 'Enter') {
                            e.preventDefault(); // Prevent form submission
                            input.blur(); // This will trigger the blur event and save
                        } else if (e.key === 'Escape') {
                            field.textContent = currentValue;
                            field.classList.remove('editing');
                        }
                    });

                    // Handle blur (clicking outside)
                    input.addEventListener('blur', saveChanges);
                });
            });
        });
    </script>
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h1>Products Management</h1>

        {% for message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ message }}
            </div>
        {% endfor %}

        <a href="{{ path('admin_product_new') }}" class="btn btn-primary mb-3">Add New Product</a>

        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Images</th>
                    <th>Name</th>
                    <th>SKU</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for product in products %}
                    <tr>
                        <td data-product-id="{{ product.id }}">{{ product.id }}</td>
                        <td>
                            <div class="product-images">
                                {# Main product image #}
                                <img src="{{ asset('uploads/products/' ~ product.image) }}" alt="{{ product.name }}" class="product-image">
                                
                                {# Color variant images #}
                                {% for color in product.colors|slice(0, 4) %}
                                    <img src="{{ asset('uploads/products/' ~ color.imageOff) }}" 
                                         alt="{{ color.colorName }}" 
                                         class="color-image"
                                         title="{{ color.colorName }}"
                                         data-color="{{ color.colorCode }}">
                                {% endfor %}
                                
                                {# More colors indicator #}
                                {% if product.colors|length > 4 %}
                                    <div class="color-image more-colors" title="More colors available">
                                        +{{ product.colors|length - 4 }}
                                    </div>
                                {% endif %}
                            </div>
                        </td>
                        <td class="editable" data-field="name">{{ product.name }}</td>
                        <td class="editable" data-field="sku">{{ product.sku }}</td>
                        <td class="editable" data-field="price">${{ product.price }}</td>
                        <td class="editable" data-field="stockQuantity">{{ product.stockQuantity }}</td>
                        <td>{{ product.category ? product.category.name : 'No Category' }}</td>
                        <td>
                            <a href="#" class="btn btn-sm btn-info">Edit</a>
                            <form method="post" action="{{ path('admin_product_delete', {'id': product.id}) }}" 
                                  class="d-inline delete-product-form">
                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ product.id) }}">
                                <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                            </form>
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="8" class="text-center">No products found</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
{% endblock %} 