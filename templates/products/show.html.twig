{% extends 'base.html.twig' %}

{% block title %}{{ product.name }} - Wall Store{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .product-container {
            padding: 20px;
            display: flex;
            gap: 30px;
            background: #faf9f8;
            margin: 20px;
            border-radius: 4px;
        }

        .product-image {
            flex: 1;
            max-width: 500px;
            padding: 20px;
            background: white;
            border-radius: 8px;
            position: relative;
        }

        .product-image img.main-image {
            width: 500px;
            height: 500px;
            background: #f8f9fa;
            border: none;
            object-fit: contain;
            display: block;
            margin: 0 auto;
            cursor: zoom-in;
        }

        .zoom-container {
            position: relative;
            width: 500px;
            height: 500px;
        }

        .zoom-lens {
            position: absolute;
            border: 2px solid #d4d4d4;
            width: 150px;
            height: 150px;
            background: rgba(255,255,255,0.4);
            cursor: none;
            display: none;
        }

        .zoom-result {
            position: fixed;
            top: 50%;
            transform: translateY(calc(-50% - 100px));
            left: calc(50% - 100px);
            width: 600px;
            height: 600px;
            border: 1px solid #d4d4d4;
            background: white;
            display: none;
            overflow: hidden;
            z-index: 999;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        @media (max-width: 1400px) {
            .zoom-result {
                display: none !important;
            }
        }

        .product-info {
            flex: 1;
            padding: 0 20px;
        }

        .store-link {
            color: #666;
            text-decoration: none;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
            margin-bottom: 10px;
        }

        .store-link i {
            font-size: 12px;
            color: #999;
        }

        .ratings {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 10px 0;
        }

        .stars {
            color: #ffc107;
        }

        .review-count {
            color: #666;
            font-size: 14px;
        }

        .price-section {
            background: #f8f9fa;
            padding: 15px;
            margin: 15px 0;
            border-radius: 4px;
        }

        .current-price {
            font-size: 24px;
            font-weight: 500;
        }

        .original-price {
            text-decoration: line-through;
            color: #999;
            margin-right: 10px;
        }

        .discount-badge {
            background: #28a745;
            color: white;
            padding: 2px 8px;
            border-radius: 3px;
            font-size: 14px;
            margin-left: 10px;
        }

        .color-options {
            margin: 20px 0;
            display: flex;
            gap: 10px;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid #fff;
            box-shadow: 0 0 0 1px #ddd;
            transition: all 0.2s ease;
        }

        .color-option.selected {
            box-shadow: 0 0 0 2px #000;
        }

        .product-details {
            margin: 20px 0;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .detail-label {
            color: #666;
            text-transform: uppercase;
            font-size: 14px;
        }

        .detail-value {
            font-weight: 500;
        }

        .in-stock {
            color: #28a745;
        }

        .quantity-selector {
            width: 100%;
            padding: 10px;
            margin: 20px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23666%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 10px;
            padding-right: 30px;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .btn {
            flex: 1;
            padding: 12px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            font-size: 14px;
            transition: all 0.2s ease;
        }

        .btn-cart {
            background: white;
            border: 2px solid #000;
            color: #000;
        }

        .btn-cart:hover {
            background: #f8f9fa;
        }

        .btn-buy {
            background: #000;
            color: white;
        }

        .btn-buy:hover {
            background: #333;
        }

        .thumbnail-container {
            display: flex;
            gap: 8px;
            margin-top: 15px;
            justify-content: flex-start;
            padding: 0;
        }

        .thumbnail {
            width: 60px;
            height: 60px;
            min-width: 60px;
            min-height: 60px;
            background: #f8f9fa;
            border: none;
            cursor: pointer;
            padding: 0;
            border-radius: 4px;
            object-fit: cover;
            display: block;
        }

        .thumbnail:hover {
            background: #f0f0f0;
        }

        .shipping-info {
            margin-top: 20px;
            padding: 15px 0;
            border-top: 1px solid #eee;
        }

        .shipping-row {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #666;
            font-size: 14px;
            margin: 8px 0;
        }

        .shipping-row i {
            color: #999;
            font-size: 16px;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="product-container">
        <div class="product-image">
            {% if product.images is not empty %}
                {# Find primary image or use first image #}
                {% set mainImage = product.images|filter(image => image.isPrimary)|first %}
                {% if not mainImage %}
                    {% set mainImage = product.images|first %}
                {% endif %}
                
                {% if mainImage %}
                    <div class="zoom-container">
                        <div class="zoom-lens"></div>
                        <img src="{{ asset('uploads/products/' ~ mainImage.imageOn) }}" 
                             data-image-off="{{ asset('uploads/products/' ~ mainImage.imageOff) }}"
                             alt="{{ product.name }}" 
                             class="main-image"
                             width="500"
                             height="500">
                        <div class="zoom-result"></div>
                    </div>
                {% else %}
                    <img src="https://placehold.co/500x500/f8f9fa/9ca3af?text=No+Image" 
                         alt="{{ product.name }}" 
                         class="main-image"
                         width="500"
                         height="500">
                {% endif %}

            <div class="thumbnail-container">
                    {% if product.colors|length > 0 %}
                        {% for color in product.colors %}
                            {% if color.imageOn %}
                                <img src="{{ asset('uploads/products/' ~ color.imageOn) }}" 
                                     data-image-off="{{ asset('uploads/products/' ~ color.imageOff) }}"
                                     class="thumbnail" 
                                     data-color-id="{{ color.id }}"
                                     alt="{{ product.name }} - {{ color.colorName }}"
                                     width="60"
                                     height="60"
                                     loading="lazy">
                            {% endif %}
                        {% endfor %}
                    {% endif %}
            </div>
            {% endif %}
        </div>

        <div class="product-info">
            <h1>{{ product.name }}</h1>
            <a href="#" class="store-link">
                Visit the Wall Store <i class="fas fa-external-link-alt"></i>
            </a>
            
            <div class="ratings">
                <div class="stars">
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star"></i>
                    <i class="fas fa-star-half-alt"></i>
                </div>
                <span class="review-count">(128 reviews)</span>
            </div>

            <div class="price-section">
                {% if product.originalPrice and product.originalPrice > product.price %}
                    <span class="original-price">${{ (product.originalPrice/100)|number_format(2, '.', ',') }}</span>
                {% endif %}
                <span class="current-price">${{ (product.price/100)|number_format(2, '.', ',') }}</span>
                {% if product.discount %}
                    <span class="discount-badge">-{{ product.discount }}%</span>
                {% endif %}
            </div>

            <div class="product-details">
                {% if product.category %}
                <div class="detail-row">
                    <span class="detail-label">CATEGORY</span>
                    <span class="detail-value">
                        {{ product.category.name }}
                        {% if product.subcategory %}
                            - {{ product.subcategory.name }}
                        {% endif %}
                    </span>
                </div>
                {% endif %}
                {% if product.material %}
                <div class="detail-row">
                    <span class="detail-label">MATERIAL</span>
                    <span class="detail-value">{{ product.material }}</span>
                </div>
                {% endif %}
                {% if product.colors|length > 0 %}
                <div class="detail-row">
                    <span class="detail-label">COLOR</span>
                    <span class="detail-value color-name">{{ product.colors[0].colorName }}</span>
                </div>
                {% endif %}
                <div class="detail-row">
                    <span class="detail-label">AVAILABILITY</span>
                    <span class="detail-value {% if product.stockQuantity > 0 %}in-stock{% endif %}">
                        {{ product.stockQuantity > 0 ? 'In Stock' : 'Out of Stock' }}
                    </span>
                </div>
            </div>

            {% if product.colors|length > 0 %}
            <div class="color-options">
                {% for color in product.colors %}
                    <div class="color-option {% if loop.first %}selected{% endif %}" 
                         style="background-color: {{ color.colorCode }};"
                         data-color-id="{{ color.id }}"
                         data-color-name="{{ color.colorName }}"
                         data-image-on="{{ asset('uploads/products/' ~ color.imageOn) }}"
                         data-image-off="{{ asset('uploads/products/' ~ color.imageOff) }}"
                         title="{{ color.colorName }}">
                    </div>
                {% endfor %}
            </div>
            {% endif %}

            {% if product.stockQuantity > 0 %}
                <select class="quantity-selector" name="quantity">
                    {% for i in 1..min(product.stockQuantity, 10) %}
                        <option value="{{ i }}">Quantity: {{ i }}</option>
                    {% endfor %}
            </select>

            <div class="action-buttons">
                    <button class="btn btn-cart" data-product-id="{{ product.id }}">ADD TO CART</button>
                    <button class="btn btn-buy" data-product-id="{{ product.id }}">BUY NOW</button>
            </div>
            {% endif %}

            <div class="shipping-info">
                <div class="shipping-row">
                    <i class="fas fa-truck"></i>
                    <span>Free shipping on orders over $500</span>
                </div>
                <div class="shipping-row">
                    <i class="fas fa-undo"></i>
                    <span>30-day free returns</span>
                </div>
                <div class="shipping-row">
                    <i class="fas fa-shield-alt"></i>
                    <span>2-year warranty included</span>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Color selection with image update
        document.querySelectorAll('.color-option').forEach(option => {
                option.addEventListener('click', function() {
                    // Update color selection
                document.querySelectorAll('.color-option').forEach(opt => 
                    opt.classList.remove('selected'));
                    this.classList.add('selected');

                    // Update color name in details
                    const colorName = document.querySelector('.color-name');
                    if (colorName) {
                        colorName.textContent = this.dataset.colorName;
                    }

                    // Update main image
                    const mainImage = document.querySelector('.main-image');
                    mainImage.src = this.dataset.imageOn;
                    mainImage.dataset.imageOff = this.dataset.imageOff;
                });
            });

            // Thumbnail click
            document.querySelectorAll('.thumbnail').forEach(thumb => {
                thumb.addEventListener('click', function() {
                    // Update main image
                    const mainImage = document.querySelector('.main-image');
                    mainImage.src = this.src;
                    mainImage.dataset.imageOff = this.dataset.imageOff;

                    // Update color selection if thumbnail has color
                    const colorId = this.dataset.colorId;
                    if (colorId) {
                        document.querySelectorAll('.color-option').forEach(opt => {
                            if (opt.dataset.colorId === colorId) {
                                opt.click();
                            }
                        });
                    }
                });

                // Thumbnail hover effect
                thumb.addEventListener('mouseenter', function() {
                    if (this.dataset.imageOff) {
                        this.src = this.dataset.imageOff;
                    }
                });

                thumb.addEventListener('mouseleave', function() {
                    if (this.dataset.imageOff) {
                        this.src = this.getAttribute('src').replace('imageOff', 'imageOn');
                    }
                });
            });

            // Zoom functionality
            const container = document.querySelector('.zoom-container');
            const mainImage = document.querySelector('.main-image');
            const lens = document.querySelector('.zoom-lens');
            const result = document.querySelector('.zoom-result');
            
            if (container && mainImage && lens && result) {
                function updateZoom() {
                    // Calculate zoom ratio
                    const cx = result.offsetWidth / lens.offsetWidth;
                    const cy = result.offsetHeight / lens.offsetHeight;

                    // Set background image
                    result.style.backgroundImage = `url('${mainImage.src}')`;
                    result.style.backgroundSize = `${mainImage.offsetWidth * cx}px ${mainImage.offsetHeight * cy}px`;
                }

                function moveLens(e) {
                    e.preventDefault();
                    
                    // Get relative cursor position
                    const rect = container.getBoundingClientRect();
                    let x = e.clientX - rect.left;
                    let y = e.clientY - rect.top;

                    // Adjust for scroll
                    x = x - window.pageXOffset;
                    y = y - window.pageYOffset;

                    // Calculate lens position
                    let posX = x - (lens.offsetWidth / 2);
                    let posY = y - (lens.offsetHeight / 2);

                    // Prevent lens from going outside image
                    posX = Math.min(Math.max(posX, 0), container.offsetWidth - lens.offsetWidth);
                    posY = Math.min(Math.max(posY, 0), container.offsetHeight - lens.offsetHeight);

                    // Update lens position
                    lens.style.left = `${posX}px`;
                    lens.style.top = `${posY}px`;

                    // Calculate and update background position
                    const cx = result.offsetWidth / lens.offsetWidth;
                    const cy = result.offsetHeight / lens.offsetHeight;
                    result.style.backgroundPosition = `-${posX * cx}px -${posY * cy}px`;
                }

                // Event listeners for zoom
                container.addEventListener('mousemove', moveLens);
                container.addEventListener('mouseenter', function() {
                    lens.style.display = 'block';
                    result.style.display = 'block';
                    updateZoom();
                });

                container.addEventListener('mouseleave', function() {
                    lens.style.display = 'none';
                    result.style.display = 'none';
                });

                // Handle image switching
                mainImage.addEventListener('mouseenter', function() {
                    if (this.dataset.imageOff) {
                        this.src = this.dataset.imageOff;
                        updateZoom();
                    }
                });

                mainImage.addEventListener('mouseleave', function() {
                    if (this.dataset.imageOff) {
                        this.src = this.getAttribute('src').replace('imageOff', 'imageOn');
                        updateZoom();
                    }
                });

                // Update zoom on window resize
                window.addEventListener('resize', updateZoom);

                // Initial setup
                updateZoom();
            }

            // Add to cart functionality
            document.querySelector('.btn-cart')?.addEventListener('click', function() {
                const productId = this.dataset.productId;
                const quantity = document.querySelector('.quantity-selector').value;
                const colorId = document.querySelector('.color-option.selected')?.dataset.colorId;

                fetch(`/cart/add/${productId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token('cart_add') }}'
                    },
                    body: JSON.stringify({ quantity, colorId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update cart count if you have a cart counter in your header
                        const cartCount = document.querySelector('.cart-count');
                        if (cartCount) cartCount.textContent = data.cartCount;
                        
                        alert('Added to cart successfully!');
                    } else {
                        alert(data.message || 'Error adding to cart');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error adding to cart. Please try again.');
                });
            });
        });
    </script>
{% endblock %}